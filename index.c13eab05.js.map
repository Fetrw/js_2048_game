{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nconst $a5fd07fa01589658$var$INITIAL_STATE = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.initialState = initialState || $a5fd07fa01589658$var$INITIAL_STATE;\n        this.state = this.copyState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    copyState(state) {\n        return state.map((row)=>row.slice());\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.state = this.copyState(this.initialState);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const currentRow = this.state[row];\n            const newRow = this.slide(currentRow);\n            if (!this.arraysEqual(currentRow, newRow)) {\n                this.state[row] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let row = 0; row < 4; row++){\n            const currentRow = this.state[row];\n            const reversedRow = currentRow.slice().reverse();\n            const newRow = this.slide(reversedRow).reverse();\n            if (!this.arraysEqual(currentRow, newRow)) {\n                this.state[row] = newRow;\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const currentCol = this.state.map((row)=>row[col]);\n            const newCol = this.slide(currentCol);\n            if (!this.arraysEqual(currentCol, newCol)) {\n                for(let row = 0; row < 4; row++)this.state[row][col] = newCol[row];\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let col = 0; col < 4; col++){\n            const currentCol = this.state.map((row)=>row[col]);\n            const reversedCol = currentCol.slice().reverse();\n            const newCol = this.slide(reversedCol).reverse();\n            if (!this.arraysEqual(currentCol, newCol)) {\n                for(let row = 0; row < 4; row++)this.state[row][col] = newCol[row];\n                moved = true;\n            }\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.checkGameStatus();\n        }\n    }\n    slide(row) {\n        const nonZero = row.filter((val)=>val !== 0);\n        const merged = [];\n        for(let i = 0; i < nonZero.length; i++)if (nonZero[i] === nonZero[i + 1]) {\n            merged.push(nonZero[i] * 2);\n            this.score += nonZero[i] * 2;\n            i++;\n        } else merged.push(nonZero[i]);\n        while(merged.length < 4)merged.push(0);\n        return merged;\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.state[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    arraysEqual(arr1, arr2) {\n        if (arr1.length !== arr2.length) return false;\n        for(let i = 0; i < arr1.length; i++){\n            if (arr1[i] !== arr2[i]) return false;\n        }\n        return true;\n    }\n    checkGameStatus() {\n        if (this.state.flat().includes(2048)) {\n            this.status = \"win\";\n            return;\n        }\n        const hasEmptyCells = this.state.flat().includes(0);\n        const canMerge = this.canMerge();\n        if (!hasEmptyCells && !canMerge) this.status = \"lose\";\n    }\n    canMerge() {\n        for(let row = 0; row < 4; row++)for(let col = 0; col < 4; col++){\n            const current = this.state[row][col];\n            if (current === 0) continue;\n            if (col < 3 && current === this.state[row][col + 1]) return true;\n            if (row < 3 && current === this.state[row + 1][col]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$gameField = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$messageContainer = document.querySelector(\".message-container\");\nconst $09e991522ca7e64e$var$messageElements = {\n    lose: document.querySelector(\".message-lose\"),\n    win: document.querySelector(\".message-win\"),\n    start: document.querySelector(\".message-start\")\n};\nfunction $09e991522ca7e64e$var$updateUI() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const score = $09e991522ca7e64e$var$game.getScore();\n    const currentStatus = $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$scoreElement.textContent = score;\n    $09e991522ca7e64e$var$gameField.querySelectorAll(\".field-row\").forEach((row, rowIndex)=>{\n        row.querySelectorAll(\".field-cell\").forEach((cell, colIndex)=>{\n            cell.textContent = state[rowIndex][colIndex] || \"\";\n            cell.className = `field-cell ${state[rowIndex][colIndex] ? `field-cell--${state[rowIndex][colIndex]}` : \"\"}`;\n        });\n    });\n    $09e991522ca7e64e$var$messageContainer.querySelectorAll(\".message\").forEach((message)=>message.classList.add(\"hidden\"));\n    if (currentStatus === \"win\") $09e991522ca7e64e$var$messageElements.win.classList.remove(\"hidden\");\n    else if (currentStatus === \"lose\") $09e991522ca7e64e$var$messageElements.lose.classList.remove(\"hidden\");\n    else if (currentStatus === \"playing\") $09e991522ca7e64e$var$messageElements.start.classList.add(\"hidden\");\n    else $09e991522ca7e64e$var$messageElements.start.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$handleKeyPress(evt) {\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(evt.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$updateUI();\n}\nfunction $09e991522ca7e64e$var$startGame() {\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.classList.remove(\"start\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"restart\");\n    $09e991522ca7e64e$var$updateUI(); // Оновлюємо інтерфейс після зміни статусу\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    $09e991522ca7e64e$var$startButton.classList.remove(\"restart\");\n    $09e991522ca7e64e$var$startButton.classList.add(\"start\");\n    $09e991522ca7e64e$var$updateUI(); // Оновлюємо інтерфейс після скидання гри\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$startGame();\n    else $09e991522ca7e64e$var$restartGame();\n});\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleKeyPress);\n$09e991522ca7e64e$var$updateUI(); // Оновлюємо інтерфейс при завантаженні сторінки\n\n\n//# sourceMappingURL=index.c13eab05.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst gameField = document.querySelector('.game-field');\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.querySelector('.start');\nconst messageContainer = document.querySelector('.message-container');\nconst messageElements = {\n  lose: document.querySelector('.message-lose'),\n  win: document.querySelector('.message-win'),\n  start: document.querySelector('.message-start'),\n};\n\nfunction updateUI() {\n  const state = game.getState();\n  const score = game.getScore();\n  const currentStatus = game.getStatus();\n\n  scoreElement.textContent = score;\n\n  gameField.querySelectorAll('.field-row').forEach((row, rowIndex) => {\n    row.querySelectorAll('.field-cell').forEach((cell, colIndex) => {\n      cell.textContent = state[rowIndex][colIndex] || '';\n      cell.className = `field-cell ${state[rowIndex][colIndex] ? `field-cell--${state[rowIndex][colIndex]}` : ''}`;\n    });\n  });\n\n  messageContainer\n    .querySelectorAll('.message')\n    .forEach((message) => message.classList.add('hidden'));\n\n  if (currentStatus === 'win') {\n    messageElements.win.classList.remove('hidden');\n  } else if (currentStatus === 'lose') {\n    messageElements.lose.classList.remove('hidden');\n  } else if (currentStatus === 'playing') {\n    messageElements.start.classList.add('hidden');\n  } else {\n    messageElements.start.classList.remove('hidden');\n  }\n}\n\nfunction handleKeyPress(evt) {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (evt.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n  updateUI();\n}\n\nfunction startGame() {\n  game.start();\n  startButton.textContent = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n\n  updateUI(); // Оновлюємо інтерфейс після зміни статусу\n}\n\nfunction restartGame() {\n  game.restart();\n  startButton.textContent = 'Start';\n  startButton.classList.remove('restart');\n  startButton.classList.add('start');\n\n  updateUI(); // Оновлюємо інтерфейс після скидання гри\n}\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    startGame();\n  } else {\n    restartGame();\n  }\n});\n\ndocument.addEventListener('keydown', handleKeyPress);\n\nupdateUI(); // Оновлюємо інтерфейс при завантаженні сторінки\n","'use strict';\n\nconst INITIAL_STATE = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nclass Game {\n  constructor(initialState) {\n    this.initialState = initialState || INITIAL_STATE;\n    this.state = this.copyState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  copyState(state) {\n    return state.map((row) => row.slice());\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.state = this.copyState(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const currentRow = this.state[row];\n      const newRow = this.slide(currentRow);\n\n      if (!this.arraysEqual(currentRow, newRow)) {\n        this.state[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let row = 0; row < 4; row++) {\n      const currentRow = this.state[row];\n      const reversedRow = currentRow.slice().reverse();\n      const newRow = this.slide(reversedRow).reverse();\n\n      if (!this.arraysEqual(currentRow, newRow)) {\n        this.state[row] = newRow;\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const currentCol = this.state.map((row) => row[col]);\n      const newCol = this.slide(currentCol);\n\n      if (!this.arraysEqual(currentCol, newCol)) {\n        for (let row = 0; row < 4; row++) {\n          this.state[row][col] = newCol[row];\n        }\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const currentCol = this.state.map((row) => row[col]);\n      const reversedCol = currentCol.slice().reverse();\n      const newCol = this.slide(reversedCol).reverse();\n\n      if (!this.arraysEqual(currentCol, newCol)) {\n        for (let row = 0; row < 4; row++) {\n          this.state[row][col] = newCol[row];\n        }\n        moved = true;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkGameStatus();\n    }\n  }\n\n  slide(row) {\n    const nonZero = row.filter((val) => val !== 0);\n    const merged = [];\n\n    for (let i = 0; i < nonZero.length; i++) {\n      if (nonZero[i] === nonZero[i + 1]) {\n        merged.push(nonZero[i] * 2);\n        this.score += nonZero[i] * 2;\n        i++;\n      } else {\n        merged.push(nonZero[i]);\n      }\n    }\n\n    while (merged.length < 4) {\n      merged.push(0);\n    }\n\n    return merged;\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  checkGameStatus() {\n    if (this.state.flat().includes(2048)) {\n      this.status = 'win';\n\n      return;\n    }\n\n    const hasEmptyCells = this.state.flat().includes(0);\n    const canMerge = this.canMerge();\n\n    if (!hasEmptyCells && !canMerge) {\n      this.status = 'lose';\n    }\n  }\n\n  canMerge() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        const current = this.state[row][col];\n\n        if (current === 0) {\n          continue;\n        }\n\n        if (col < 3 && current === this.state[row][col + 1]) {\n          return true;\n        }\n\n        if (row < 3 && current === this.state[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$INITIAL_STATE","$09e991522ca7e64e$var$game","constructor","initialState","state","copyState","score","status","map","row","slice","getState","getScore","getStatus","start","addRandomTile","restart","moveLeft","moved","currentRow","newRow","slide","arraysEqual","checkGameStatus","moveRight","reversedRow","reverse","moveUp","col","currentCol","newCol","moveDown","reversedCol","nonZero","filter","val","merged","i","length","push","emptyCells","randomIndex","Math","floor","random","arr1","arr2","flat","includes","hasEmptyCells","canMerge","current","$09e991522ca7e64e$var$gameField","document","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$messageContainer","$09e991522ca7e64e$var$messageElements","lose","win","$09e991522ca7e64e$var$updateUI","currentStatus","textContent","querySelectorAll","forEach","rowIndex","cell","colIndex","className","message","classList","add","remove","addEventListener","evt","key"],"version":3,"file":"index.c13eab05.js.map"}